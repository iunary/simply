// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/iunary/simply/internal/app"
	"github.com/iunary/simply/internal/config"
	"github.com/iunary/simply/internal/controllers"
	"github.com/iunary/simply/internal/database"
	"github.com/iunary/simply/internal/repositories"
	"github.com/iunary/simply/internal/services"
	"github.com/iunary/simply/internal/transports/http"
	"log"
)

// Injectors from wire.go:

func CreateApp(cf string, logger *log.Logger) (*app.Application, error) {
	viper, err := config.New(cf, logger)
	if err != nil {
		return nil, err
	}
	options, err := http.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	client, err := database.New(databaseOptions, logger)
	if err != nil {
		return nil, err
	}
	iUserRepository := repositories.NewUserRepository(client, viper, logger)
	iUserService := services.NewUserService(logger, viper, iUserRepository)
	userController := controllers.NewUserController(logger, viper, iUserService)
	handlers := controllers.SetupHandlers(userController)
	engine := http.NewRouter(options, logger, handlers)
	server, err := http.New(options, logger, engine)
	if err != nil {
		return nil, err
	}
	application, err := newApp(viper, logger, server)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(config.ProviderSet, database.ProviderSet, services.ProviderSet, repositories.ProviderSet, controllers.ProviderSet, http.ProviderSet)
